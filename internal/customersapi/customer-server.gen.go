// Package customersapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package customersapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of customers.
	// (GET /customers)
	Customers(ctx echo.Context, params CustomersParams) error
	// Create a customer.
	// (POST /customers)
	NewCustomer(ctx echo.Context) error

	// (GET /customers/{id})
	GetCustomer(ctx echo.Context, id string) error
	// Update a customer.
	// (PUT /customers/{id})
	UpdateCustomer(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Customers converts echo context to params.
func (w *ServerInterfaceWrapper) Customers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomersParams
	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", ctx.QueryParams(), &params.NextToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nextToken: %s", err))
	}

	// ------------- Optional query parameter "maxItems" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxItems", ctx.QueryParams(), &params.MaxItems)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maxItems: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Customers(ctx, params)
	return err
}

// NewCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) NewCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCustomer(ctx)
	return err
}

// GetCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomer(ctx, id)
	return err
}

// UpdateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomer(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/customers", wrapper.Customers, m...)
	router.POST(baseURL+"/customers", wrapper.NewCustomer, m...)
	router.GET(baseURL+"/customers/:id", wrapper.GetCustomer, m...)
	router.PUT(baseURL+"/customers/:id", wrapper.UpdateCustomer, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW3PbNhP9Kxh8mfledKFkJ034pqRN6ubm2m7T1vVkIHFFIiEBGljqEg//e2dBiiIp",
	"WlbStJPp+E0SubvA2XP2ALrhM52kWoFCy/0bbmcRJMJ9fJZZ1AkY+hyAnRmZotSK+9UTZsCmWlkY8B5P",
	"jU7BoAQXPDMgEIL3AnfDLyJgKBOwKJKUYQRstkm4FJaVobzH59oklIAHAqFPIbzHcZ0C97lFI1XI814z",
	"ebvWhNW+Mz1vlOuxpcSIWZ0Am4rZx9DoTAWDriIy2AODDEChnEswFAsrkaQxhXuj8dHxw0ffPX4yefrs",
	"+x+ev/jxp5ev35z+fHZ+8eu7337/o6tQLKYQ291ir9zvTFgrQwUBQ82EYlQX11RVIiQubCdj+YMwRqzp",
	"uxIJdDeFnrQxau7oDSxZxYuO1Wdp8KVtj4VFVsYf2Pu8xw1cZ9JAwP1L6lG5uwrGXp2IjeVdVdn09APM",
	"kFa/2Zk9FSHs6XcqQtjH/U0a+lL15YGBOff5/4ZbwQ1LtQ0rSLvaBSu80B9BdTS3BcC28FXeo17dLuF6",
	"I3d38K9I6ltjeo9hJC1LMotsCixT8jqDvfRPpHoFKsSI+0d3kbPJS+rPLwUZ6z0Scfx2zv3L/WypNzbv",
	"3bR6twBjy75VGpIKHx1veyAVQkjBrTVuQq/yq9ZYLRfLapP/OgOLA5fDwiwzEtfntMBiFVaGi2PHf4qO",
	"QAQOsaIjfJJhpI38JFz2beNS+RLWvMdXfZGIT1r1RSpDgbAU677IMNq8t7TnLn9O1aWa664uS8smpycs",
	"NXohA7BMMCupj9uxY1EbkrIFs5AzGPzp1iLR9boaBpSF97a48rE39vojrz/2iGQ6BSVSyX1+NPAGY9KS",
	"wMiBMGxMghA6huIZYGYUEyyWFomRVQgxj/rqMDoJ6ityNYxIAF3qyxLl6wzMegvydnD0SlvvnCDdwYlY",
	"nTid1WMTsZJJlnB/5HmO/eW3DmJdEbOKAek2P/Y8Nxq1QlAOB5GmsZy53Q0/2IKwpdJs7XN/5Egt4gxa",
	"s/WyecrgY2/0pO897o+PL0bH/uihPx6Tw+6KP6SohsGRux/i1puRdUkUJHPRymYxEpJXFXStIVG3xO41",
	"Eli1Kb/tTV4H/xD/KIzLBTa3XcFW2RZR99g73mVkpQ6lkc1pejc07nAv1X3pBoXNkkSYNff5C8DbmIwi",
	"tHWLIry6VO4YVHCelhYhpq8BI00NOn17fuGoby1GRmdh9BQisZDaOLYv6kcSsbTvU6NXROnMSMr1XPn+",
	"eTZ1BqH8BzeTd+e+fyoMSqqW+9tVbB6eQeiexCKZBsInXQ/H3uhh3zvqH42G80zNKNQOH9xMUvnKvTWY",
	"GIqQCxhKtdAFwW3Rk1TbjhHwzJGYCRUws5kGCpYNgjYHQd0AigkOFp/qYH2AxA4jVMNimjaBJoN8R92j",
	"r6Pu/4aeP1+4+zS7uRC1pPtkn3TpeCNiAyJYM1hJi3XhH6jmDS8byN7rmODbGvvwRgb5He5uaxiyqbAQ",
	"MK2YxP/b1s2xqfIXgDXatQy/WeekSlMfvHRyngPOIlIEvUYb31q8uy41db3voPCPOfq95jsUfKdNX9Tv",
	"z4EG6/y60PrgDo3fi5jMOOsQbHnNaXjx7T5cvP33RVrQ6+up9OufB9p31W/6TFCC8SUjoQz9hgZBWfHz",
	"7XtD5Xv7btl3XsGw53/t2IFeyd3dYUpKVNjlt4BXCrC/ELEMBDpcRBzzA9+25T9BpQroRzira7qYAa1H",
	"p7XR4+SY538FAAD//9zSPTXcFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
